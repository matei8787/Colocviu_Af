#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <stack>

std::ifstream f("ctc.in");
std::ofstream g("ctc.out");

const int NMAX = 1e5;
std::vector<int> L[NMAX + 1];
std::vector<int> ids, lowlink;
std::vector<bool> isArticulation;
std::stack<int> st;
int timer;
std::vector<std::vector<int>> scc;

int viz[NMAX + 1];
int N, M;

void articulationPoint(int at, int parent) {

    viz[at] = 1;
    ids[at] = lowlink[at] = timer++;
    int children = 0;

    for (auto to: L[at]) {
        if (to == parent) continue;
        if (!viz[to]) {
            articulationPoint(to, at);
            lowlink[at] = std::min(lowlink[at], lowlink[to]);
            if (lowlink[to] >= ids[at] && parent != -1) {
                isArticulation[at] = true;
            }
            ++children;
        }
        else {
            lowlink[at] = std::min(lowlink[at], ids[to]);
        }
    }

    if (parent == -1 && children > 1) {
        isArticulation[at] = true;
    }
}

int main() {

    f >> N >> M;
    for(int i = 1; i <= M; ++i){
        int x, y;
        f >> x >> y;
        L[x].push_back(y);
        L[y].push_back(x);
    }

    ids.assign(N+1, -1);
    isArticulation.assign(N + 1, false);
    lowlink.assign(N+1, 0);

    for (int i = 1; i <= N; ++i){
        if(!viz[i])
            articulationPoint(i, -1);
    }

    for (int i = 1; i <= N; ++i){
        if (isArticulation[i])
            std::cout << i << " ";
    }

    return 0;
}