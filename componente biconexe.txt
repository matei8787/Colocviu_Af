#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <stack>

std::ifstream f("ctc.in");
std::ofstream g("ctc.out");

const int NMAX = 1e5;
std::vector<int> L[NMAX + 1];
std::vector<int> ids, lowlink;
std::stack<int> st;
int timer;
std::stack<std::pair<int, int>> edgeStack;

int viz[NMAX + 1];
int N, M;

void dfsBiconex(int at, int parent) {

    viz[at] = 1;
    ids[at] = lowlink[at] = timer++;
    int children = 0;

    for (auto to: L[at]) {
        if (to == parent) continue;

        if (!viz[to]) {
            edgeStack.emplace(at, to);
            dfsBiconex(to, at);
            lowlink[at] = std::min(lowlink[at], lowlink[to]);

            if(lowlink[to] >= ids[at]) {
                while (!edgeStack.empty()) {
                    auto edge = edgeStack.top();
                    edgeStack.pop();
                    if (edge.first == at && edge.second == to) break;
                }
            }
        }
        else if (ids[to] < ids[at]) {
            edgeStack.push({at, to});
            lowlink[at] = std::min(lowlink[at], ids[to]);
        }
    }

}

int main() {

    f >> N >> M;
    for(int i = 1; i <= M; ++i){
        int x, y;
        f >> x >> y;
        L[x].push_back(y);
        L[y].push_back(x);
    }

    ids.assign(N+1, -1);
    lowlink.assign(N+1, -1);

    for (int i = 1; i <= N; ++i){
        if(!viz[i])
            dfsBiconex(i, -1);
        if (!edgeStack.empty()) {
            std::cout << "Componenta biconexă finală:\n";
            while (!edgeStack.empty()) {
                auto edge = edgeStack.top();
                edgeStack.pop();
                std::cout << edge.first << " - " << edge.second << "\n";
            }
            std::cout << "\n";
        }
    }
    

    return 0;
}