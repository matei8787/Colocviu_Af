#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <limits>
#include <cmath>
#include <unordered_set>

using namespace std;

const int INF = 1e9;

int levenshteinDistance(const string& a, const string& b) {
    int n = a.size(), m = b.size();
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

    for (int i = 0; i <= n; ++i) dp[i][0] = i;
    for (int j = 0; j <= m; ++j) dp[0][j] = j;

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (a[i - 1] == b[j - 1])
                dp[i][j] = dp[i - 1][j - 1];
            else
                dp[i][j] = 1 + min({dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]});
        }
    }

    return dp[n][m];
}


void clusterWords(const vector<string>& words, int k) {
    int n = words.size();

    //matrice de disntante
    vector<vector<int>> dist(n, vector<int>(n, 0));
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            dist[i][j] = dist[j][i] = levenshteinDistance(words[i], words[j]);
        }
    }

    // fist k clusteres and its centers
    vector<int> centers(k);
    for (int i = 0; i < k; ++i) centers[i] = i;

    vector<int> cluster(n, -1); // cluster[i] := clusterul cuv. i
    bool changed = true;
    
    while (changed) {
        changed = false;

        // Atribuim fiecare cuv clusterului cel mai apropiat
        for (int i = 0; i < n; ++i) {
            int bestCluster = -1, minDist = INF;
            for (int c = 0; c < k; ++c) {
                if (dist[i][centers[c]] < minDist) {
                    minDist = dist[i][centers[c]];
                    bestCluster = c;
                }
            }
            if (cluster[i] != bestCluster) {
                cluster[i] = bestCluster;
                changed = true;
            }
        }

        // centrele clusterului
        for (int c = 0; c < k; ++c) {
            int bestCenter = -1, minTotalDist = INF;
            for (int i = 0; i < n; ++i) {
                if (cluster[i] == c) {
                    int totalDist = 0;
                    for (int j = 0; j < n; ++j) {
                        if (cluster[j] == c) {
                            totalDist += dist[i][j];
                        }
                    }
                    if (totalDist < minTotalDist) {
                        minTotalDist = totalDist;
                        bestCenter = i;
                    }
                }
            }
            centers[c] = bestCenter;
        }
    }

    // degree of separation
    int separation = INF;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (cluster[i] != cluster[j]) {
                separation = min(separation, dist[i][j]);
            }
        }
    }
    
    vector<vector<string>> result(k);
    for (int i = 0; i < n; ++i) {
        result[cluster[i]].push_back(words[i]);
    }

    for (int c = 0; c < k; ++c) {
        for (const string& word : result[c]) {
            cout << word << " ";
        }
        cout << "\n";
    }
    cout << separation << "\n";
}

int main() {
    ifstream fin("cuvinte.in");
    vector<string> words;
    string word;
    while (fin >> word) {
        words.push_back(word);
    }

    int k;
    cout << "Introduceti numarul de clustere: ";
    cin >> k;

    clusterWords(words, k);

    return 0;
}
