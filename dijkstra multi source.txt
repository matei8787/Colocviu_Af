#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <limits>
#include <tuple>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int to, weight;
};

void dijkstraMultiSource(int n, const vector<int>& fortresses, const vector<vector<Edge>>& graph, vector<int>& closestFortress) {
    vector<int> dist(n + 1, INF);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;

    // add all forterss in pq
    for (int fortress : fortresses) {
        dist[fortress] = 0;
        pq.push({0, fortress});
        closestFortress[fortress] = fortress; // Fiecare forareata este cel mai apropiat nod pentru sine
    }
    
    while (!pq.empty()) {
        auto [currentDist, node] = pq.top();
        pq.pop();
        
        if (currentDist > dist[node]) continue;

        // Parcurgem vecinii nodului curent
        for (const auto& edge : graph[node]) {
            int neighbor = edge.to;
            int newDist = currentDist + edge.weight;

            // Dacă găsim un drum mai scurt
            if (newDist < dist[neighbor]) {
                dist[neighbor] = newDist;
                closestFortress[neighbor] = closestFortress[node]; // Mostenim fortareata de la nodul curent
                pq.push({newDist, neighbor});
            }
                // Dacă drumurile sunt egale, alegem fort cu identificator mai mic
            else if (newDist == dist[neighbor] && closestFortress[node] < closestFortress[neighbor]) {
                closestFortress[neighbor] = closestFortress[node];
            }
        }
    }
}

int main() {
    ifstream fin("catun.in");
    ofstream fout("catun.out");

    int n, m, k;
    fin >> n >> m >> k;

    vector<int> fortresses(k);
    for (int i = 0; i < k; ++i) {
        fin >> fortresses[i];
    }

    vector<vector<Edge>> graph(n + 1);
    for (int i = 0; i < m; ++i) {
        int x, y, z;
        fin >> x >> y >> z;
        graph[x].push_back({y, z});
        graph[y].push_back({x, z});
    }

    vector<int> closestFortress(n + 1, 0);
    dijkstraMultiSource(n, fortresses, graph, closestFortress);
    
    for (int i = 1; i <= n; ++i) {
        fout << closestFortress[i] << " ";
    }
    fout << endl;

    return 0;
}
